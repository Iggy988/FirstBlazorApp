<!--kreiramo route-->

@page "/shoppinglist"
<!--koristimo kao layout(stranicu)-->
@layout ShoppingListLayout
@using FirstBlazorApp.Data;

<PageTitle>@title</PageTitle>

<h3>ShoppingList</h3>

<EditForm Model="@grocery" OnSubmit="AddGrocery">
    <DataAnnotationsValidator/>
    <ValidationSummary />
    <p>
        <label>
            Name:
            <InputText @bind-Value="grocery.Name" />
        </label>
    </p>

     <p>
        <label>
            Price:
            <InputNumber @bind-Value="grocery.Price" />
        </label>
    </p>
   
    <button type="submit">Add Grocery</button>
</EditForm>



<table class="table table-sm">
    <th>Name</th>
    <th>Price</th>
    <th></th>
    @foreach(var grocery in groceries)
    {
            <!--Koristimo Item koji smo kreirali, ubacujemo EventCallback OnGroceryPriceIncresed-->
            <Item GroceryItem="@grocery" OnGroceryPriceIncresed="OnGroceryPriceIncresed"/>
    }
</table>

<!--one way data bind-->
<h1>Total (@sum)</h1>


@code {
    private float sum;
    private string title = "Our Groceries";
    private string groceryName = "";
    private float groceryPrice;
    private Grocery grocery = new();
    private List<Grocery> groceries = new();

    private void AddGrocery()
    {
        // ne moramo raditi check, uradjen je preko input linesa, u Grocery class
        groceries.Add(grocery);
        grocery = new();

        UpdateTotalAmount();
    }
    //metoda za updetovanje total amounta, sabira sve namirnice
    public void UpdateTotalAmount()
    {
        sum = groceries.Sum(x => x.Price);
    }
    
    public void OnGroceryPriceIncresed()
    {
        UpdateTotalAmount();
    }
}
